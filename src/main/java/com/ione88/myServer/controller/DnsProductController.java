package com.ione88.myServer.controller;

import com.ione88.myServer.entity.DnsProduct;
import com.ione88.myServer.repository.DnsProductRepository;
import com.ione88.myServer.service.DnsProductService;
import com.ione88.myServer.service.impl.DnsProductServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@Controller    // This means that this class is a Controller

@RequestMapping(path="/product") // This means URL's start with /demo (after Application path)
public class DnsProductController {
				// This means to get the bean called userRepository
	@Autowired	// Which is auto-generated by Spring, we will use it to handle the data
	private DnsProductRepository dnsProductRepository;
	private DnsProductService dnsProductService;

	@GetMapping
	public String product(Map<String, Object> model) {
		Iterable<DnsProduct> dnsProduct = dnsProductRepository.findAll();
		model.put("product", dnsProduct);
		return "product";
	}

	@PostMapping(path="filter")
	public String filter(@RequestParam String filter, Map<String, Object> model) {
		List<DnsProduct> dnsProduct;

		if (filter != null && !filter.isEmpty()) {
			dnsProduct = dnsProductRepository.findByNameContaining(filter);
			dnsProduct.addAll(dnsProductRepository.findByDescriptionContaining(filter));
		} else {
			dnsProduct = dnsProductRepository.findAll();
		}

		model.put("product", dnsProduct);

		return "product";
	}

	@PutMapping(path="/add", consumes = "application/json", produces = "text/plain") // Map ONLY POST Requests
	public @ResponseBody String createDnsProduct (@RequestBody DnsProduct dnsProduct) {

		dnsProductService = new DnsProductServiceImpl(dnsProductRepository);
		return dnsProductService.createDnsProduct(dnsProduct);
	}

}
